// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manager.proto

#ifndef PROTOBUF_manager_2eproto__INCLUDED
#define PROTOBUF_manager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_manager_2eproto();
void protobuf_AssignDesc_manager_2eproto();
void protobuf_ShutdownFile_manager_2eproto();

class HelloRequest;
class HelloReply;
class HelloReply_Nodes;
class NodeState;

enum NodeState_State {
  NodeState_State_UNKNOWN = 0,
  NodeState_State_ONLINE = 1,
  NodeState_State_READY = 2,
  NodeState_State_PROBLEM = 3
};
bool NodeState_State_IsValid(int value);
const NodeState_State NodeState_State_State_MIN = NodeState_State_UNKNOWN;
const NodeState_State NodeState_State_State_MAX = NodeState_State_PROBLEM;
const int NodeState_State_State_ARRAYSIZE = NodeState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeState_State_descriptor();
inline const ::std::string& NodeState_State_Name(NodeState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeState_State_descriptor(), value);
}
inline bool NodeState_State_Parse(
    const ::std::string& name, NodeState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeState_State>(
    NodeState_State_descriptor(), name, value);
}
// ===================================================================

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();
  
  HelloRequest(const HelloRequest& from);
  
  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();
  
  void Swap(HelloRequest* other);
  
  // implements Message ----------------------------------------------
  
  HelloRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:HelloRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_manager_2eproto();
  friend void protobuf_AssignDesc_manager_2eproto();
  friend void protobuf_ShutdownFile_manager_2eproto();
  
  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloReply_Nodes : public ::google::protobuf::Message {
 public:
  HelloReply_Nodes();
  virtual ~HelloReply_Nodes();
  
  HelloReply_Nodes(const HelloReply_Nodes& from);
  
  inline HelloReply_Nodes& operator=(const HelloReply_Nodes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply_Nodes& default_instance();
  
  void Swap(HelloReply_Nodes* other);
  
  // implements Message ----------------------------------------------
  
  HelloReply_Nodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReply_Nodes& from);
  void MergeFrom(const HelloReply_Nodes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // required string type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required bool online = 6;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 6;
  inline bool online() const;
  inline void set_online(bool value);
  
  // @@protoc_insertion_point(class_scope:HelloReply.Nodes)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_online();
  inline void clear_has_online();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;
  ::std::string* host_;
  ::std::string* type_;
  bool online_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_manager_2eproto();
  friend void protobuf_AssignDesc_manager_2eproto();
  friend void protobuf_ShutdownFile_manager_2eproto();
  
  void InitAsDefaultInstance();
  static HelloReply_Nodes* default_instance_;
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message {
 public:
  HelloReply();
  virtual ~HelloReply();
  
  HelloReply(const HelloReply& from);
  
  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();
  
  void Swap(HelloReply* other);
  
  // implements Message ----------------------------------------------
  
  HelloReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef HelloReply_Nodes Nodes;
  
  // accessors -------------------------------------------------------
  
  // required uint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
  // repeated group Nodes = 2 {
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::HelloReply_Nodes& nodes(int index) const;
  inline ::HelloReply_Nodes* mutable_nodes(int index);
  inline ::HelloReply_Nodes* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::HelloReply_Nodes >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelloReply_Nodes >*
      mutable_nodes();
  
  // @@protoc_insertion_point(class_scope:HelloReply)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HelloReply_Nodes > nodes_;
  ::google::protobuf::uint32 code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_manager_2eproto();
  friend void protobuf_AssignDesc_manager_2eproto();
  friend void protobuf_ShutdownFile_manager_2eproto();
  
  void InitAsDefaultInstance();
  static HelloReply* default_instance_;
};
// -------------------------------------------------------------------

class NodeState : public ::google::protobuf::Message {
 public:
  NodeState();
  virtual ~NodeState();
  
  NodeState(const NodeState& from);
  
  inline NodeState& operator=(const NodeState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeState& default_instance();
  
  void Swap(NodeState* other);
  
  // implements Message ----------------------------------------------
  
  NodeState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeState& from);
  void MergeFrom(const NodeState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NodeState_State State;
  static const State UNKNOWN = NodeState_State_UNKNOWN;
  static const State ONLINE = NodeState_State_ONLINE;
  static const State READY = NodeState_State_READY;
  static const State PROBLEM = NodeState_State_PROBLEM;
  static inline bool State_IsValid(int value) {
    return NodeState_State_IsValid(value);
  }
  static const State State_MIN =
    NodeState_State_State_MIN;
  static const State State_MAX =
    NodeState_State_State_MAX;
  static const int State_ARRAYSIZE =
    NodeState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return NodeState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return NodeState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return NodeState_State_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .NodeState.State state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::NodeState_State state() const;
  inline void set_state(::NodeState_State value);
  
  // @@protoc_insertion_point(class_scope:NodeState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_manager_2eproto();
  friend void protobuf_AssignDesc_manager_2eproto();
  friend void protobuf_ShutdownFile_manager_2eproto();
  
  void InitAsDefaultInstance();
  static NodeState* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloRequest

// required uint32 id = 1;
inline bool HelloRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRequest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HelloRequest::id() const {
  return id_;
}
inline void HelloRequest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// HelloReply_Nodes

// required uint32 id = 1;
inline bool HelloReply_Nodes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloReply_Nodes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloReply_Nodes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloReply_Nodes::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HelloReply_Nodes::id() const {
  return id_;
}
inline void HelloReply_Nodes::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool HelloReply_Nodes::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloReply_Nodes::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloReply_Nodes::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloReply_Nodes::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HelloReply_Nodes::name() const {
  return *name_;
}
inline void HelloReply_Nodes::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloReply_Nodes::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloReply_Nodes::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloReply_Nodes::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HelloReply_Nodes::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string host = 3;
inline bool HelloReply_Nodes::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelloReply_Nodes::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelloReply_Nodes::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelloReply_Nodes::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& HelloReply_Nodes::host() const {
  return *host_;
}
inline void HelloReply_Nodes::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void HelloReply_Nodes::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void HelloReply_Nodes::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloReply_Nodes::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* HelloReply_Nodes::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 port = 4;
inline bool HelloReply_Nodes::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HelloReply_Nodes::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HelloReply_Nodes::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HelloReply_Nodes::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 HelloReply_Nodes::port() const {
  return port_;
}
inline void HelloReply_Nodes::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required string type = 5;
inline bool HelloReply_Nodes::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HelloReply_Nodes::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HelloReply_Nodes::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HelloReply_Nodes::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& HelloReply_Nodes::type() const {
  return *type_;
}
inline void HelloReply_Nodes::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void HelloReply_Nodes::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void HelloReply_Nodes::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloReply_Nodes::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* HelloReply_Nodes::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool online = 6;
inline bool HelloReply_Nodes::has_online() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HelloReply_Nodes::set_has_online() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HelloReply_Nodes::clear_has_online() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HelloReply_Nodes::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool HelloReply_Nodes::online() const {
  return online_;
}
inline void HelloReply_Nodes::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// HelloReply

// required uint32 code = 1;
inline bool HelloReply::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloReply::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloReply::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloReply::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 HelloReply::code() const {
  return code_;
}
inline void HelloReply::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
}

// repeated group Nodes = 2 {
inline int HelloReply::nodes_size() const {
  return nodes_.size();
}
inline void HelloReply::clear_nodes() {
  nodes_.Clear();
}
inline const ::HelloReply_Nodes& HelloReply::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::HelloReply_Nodes* HelloReply::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::HelloReply_Nodes* HelloReply::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelloReply_Nodes >&
HelloReply::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelloReply_Nodes >*
HelloReply::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// NodeState

// required uint32 id = 1;
inline bool NodeState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeState::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NodeState::id() const {
  return id_;
}
inline void NodeState::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .NodeState.State state = 2;
inline bool NodeState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::NodeState_State NodeState::state() const {
  return static_cast< ::NodeState_State >(state_);
}
inline void NodeState::set_state(::NodeState_State value) {
  GOOGLE_DCHECK(::NodeState_State_IsValid(value));
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NodeState_State>() {
  return ::NodeState_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_manager_2eproto__INCLUDED
